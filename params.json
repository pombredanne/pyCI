{"name":"pyCI","tagline":"a minimal CI server","body":"# pyCI - a minimal CI server\r\n\r\npyCI is a minimal CI server with web interface and a commandline\r\nrunner for small systems like `A10-OLinuXino-LIME` or `Raspberry Pi`\r\nthat have not much resources.\r\n\r\nThe server monitors the Git repositories of your configured projects\r\nand starts a new build if there was a change. If the return value of\r\na build step is not `0` or there are messages logged in `stderr` the\r\nbuild will fail.\r\n\r\nAll logs of `stdout` and `stderr` are stored for each build an can be\r\ndisplayed in the web interface.\r\n\r\n## Requirements\r\n\r\n* Python 2.7.x\r\n* Python `daemon` library\r\n* Python `pysqlite` library\r\n\r\n## Installation\r\n\r\n### pyCI\r\n\r\n* clone the Git repository\r\n* run `sudo python setup.py install`\r\n* edit the `/etc/pycirc` file and add your projects\r\n* start the service with `sudo service pyCI start`\r\n\r\nAn init script will be automatically added on install. The asserts\r\nfor the web interface are copied to `/var/www/pyci` and owned by the\r\nuser and group `www-data`.\r\n\r\n### Web Interface (Nginx + fcgiwrap)\r\n\r\n* create a new server file under `/etc/nginx/sites-available`\r\n* create a symbolic link to the server file in `/etc/nginx/sites-enabled`\r\n* configure the server\r\n\r\n<b></b>\r\n\r\n    server {\r\n    \tlisten      80;\r\n    \tserver_name SERVER_NAME;\r\n    \r\n\t    location ~* ^.+\\.(css|png|ico|js)$ {\r\n\t        root    /var/www/pyci;\r\n\t\t    expires 30d;\r\n\t    }    \r\n    \r\n        location / {\r\n    \t    fastcgi_pass  unix:/var/run/fcgiwrap.socket;\r\n    \t    fastcgi_param SCRIPT_FILENAME /usr/local/bin/pyci.cgi;\r\n    \t    fastcgi_param PATH_INFO $uri;\r\n    \t    fastcgi_param QUERY_STRING $args;\r\n\t    }\r\n    }\r\n\r\n## Configuration\r\n\r\nThe configuration is stored in `/etc/pycirc` with an example.\r\n\r\n\r\n    start_config                       start the global server configuration section\r\n    config.build_success=command       run \"command\" after a successful build\r\n    config.build_failed=command        run \"command\" after a failed build\r\n    config.vcs_error=command           run \"command\" if pyCI can not connect to the VCS\r\n                                       \"command\" if all status are unknown\r\n    \r\n    new_repo                           start a new project configuration section\r\n    repo.url=URL_TO_GIT                url to the remote git repository\r\n    repo.branch=BRANCH                 the branch that should be used (default: master)\r\n    repo.name=My Project               unique name of the project\r\n    repo.step0=command                 \"command\" executed in the first build step\r\n    repo.step1=command                 \"command\" executed in the second build step\r\n    repo.step2=...\r\n\r\n## Running the Tests\r\n\r\nTo run the tests you just have to change to the test folder and run the `suite.py` file.\r\n\r\n    cd tests\r\n    python suite.py\r\n\r\n## Contributing\r\n\r\n1. Fork it (https://github.com/tbraun89/pyCI/fork)\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Add your feature and don't forget the tests\r\n4. Commit your changes (`git commit -am 'Add some feature'`)\r\n5. Push to the branch (`git push origin my-new-feature`)\r\n6. Create a Pull Request\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}